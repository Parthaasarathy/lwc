I'll help you craft concise, impressive responses to each question to stand out in your interview. Here are suggested answers to the questions in the image:

Lightning Related Questions

1. Any Lightning Upgrade?

Lightning is continuously upgraded by Salesforce with improvements in performance, new components, and enhanced developer tools. Key recent upgrades include advanced Einstein AI integrations, Lightning Web Security for improved security, and enhancements in Dynamic Forms and Actions to provide users more flexibility and customization.



2. What is LDS (Lightning Data Service) and what does it do?

LDS is a data layer in Lightning that allows developers to handle record data without Apex code. It provides a declarative approach for CRUD operations, which enhances efficiency by caching data, thus minimizing server requests and improving performance. LDS ensures data consistency across components, making it ideal for building efficient, interactive Lightning components.



3. Having LDS benefits LWC?

Yes, LDS is highly beneficial for LWC as it enables components to access and manage records declaratively, improving load times, reducing server calls, and simplifying data handling. It also manages record sharing and security automatically, reducing the complexity of coding security from scratch.



4. LMS (Lightning Message Service)

LMS is a framework for cross-component communication in Lightning. It allows Aura and LWC components to communicate seamlessly within a single page or app, even across different DOM hierarchies. LMS improves modularity and flexibility, especially in complex applications where components need to share data or react to each other's changes.



5. What is Lightning Data Service?

Lightning Data Service is a standard service for loading, saving, and creating records in Lightning Experience. Similar to a client-side cache, it minimizes the number of server requests and improves the speed and reliability of data operations. LDS automatically handles security and sharing, making it efficient for managing Salesforce data.



6. Aura and LWC difference?

Aura Components are the older framework in Salesforce's UI layer, offering component-based development, but with more boilerplate code. LWC (Lightning Web Components) is newer and leverages native web standards, resulting in better performance, lighter components, and simpler code. LWC is more modern, aligns with standard JavaScript, and is generally recommended for new development.



7. Performance - who were they fixed during the experience?

Performance improvements in Lightning are achieved through various techniques, such as lazy loading, using LDS for efficient data caching, optimizing component load time, and leveraging the latest LWC framework improvements. Salesforce regularly updates Lightning to reduce client-side rendering issues and optimize backend efficiency.



8. Any difference between OmniScript and LWC in terms of functionality?

OmniScript is part of Salesforce Industries (Vlocity) and is designed for complex, guided workflows. It’s a declarative tool to build customizable, industry-specific flows without coding. LWC, on the other hand, is a web component framework that enables custom front-end development. OmniScript is more suited for industry-specific guided flows, while LWC offers broader flexibility for general web development.



9. What is DOM and Shadow DOM?

The DOM (Document Object Model) is a tree structure representing a web page's elements. Shadow DOM is a part of the Web Components standard, encapsulating a component’s DOM to prevent style and script conflicts. In LWC, Shadow DOM ensures component styles are scoped locally, enhancing modularity and preventing unintended CSS leakage.



10. LWC lifecycle hooks?

LWC has several lifecycle hooks for managing component behavior:

connectedCallback() – Executes when the component is inserted into the DOM.

disconnectedCallback() – Fires when the component is removed from the DOM.

renderedCallback() – Runs after every render of the component.

errorCallback(error, stack) – Captures errors in descendant components.




11. How to communicate and pass information between 2 LWCs?

Communication between two LWCs can be achieved using:

Public properties for parent-to-child communication.

Custom events for child-to-parent communication.

Lightning Message Service (LMS) for sibling or cross-DOM communication.

Pub-Sub model for component communication within a single page.




12. LWC Best Practices?

Follow best practices such as:

Keeping components modular and focused on a single task.

Using LDS to handle data operations efficiently.

Leveraging Shadow DOM for encapsulated styling.

Avoiding complex JavaScript logic in templates.

Using reactive properties and decorators (@api, @track, @wire) wisely for performance and clarity.





Apex and Flows Related Questions

1. Lead - what is the day in / out activities?

Day-to-day activities for managing Leads typically include tracking lead statuses, nurturing and qualifying leads through automated workflows, analyzing lead sources, and ensuring follow-up tasks. Flows and Process Builder can automate routine actions such as assignment, qualification scoring, and notifications, allowing for efficient lead management.




Here are detailed responses to the additional questions in the image to help you excel in your interview:

Technical Salesforce Questions

1. Test Coverage Standards

Salesforce requires at least 75% code coverage for deployment to production, meaning 75% of Apex code must be covered by tests. However, aiming for 90-95% is a best practice to ensure high-quality, reliable code, especially for critical business logic.



2. Any Test Case Failures during Deployments? If yes, how are they handled?

If test cases fail during deployment, I first check the error messages to identify if they’re due to dependency issues, governor limits, or code logic errors. I then debug by using Salesforce’s Developer Console and modify the test data or logic as needed to ensure robust, passing test cases before re-deploying.



3. Trigger Best Practices

Best practices include:

Using only one trigger per object to avoid logic conflicts.

Keeping logic in a handler class and using triggers only for orchestration.

Avoiding recursive calls by using static variables.

Following order of execution and avoiding SOQL/DML operations inside loops to prevent governor limits.




4. What is Apex Action and what do you do with Apex Actions?

Apex actions are methods in Apex classes that can be invoked by Lightning components and flows. They are used to handle complex business logic that requires server-side processing, allowing components to offload heavy operations to the backend.



5. Asynchronous Apex and why are they used?

Asynchronous Apex (like Future Methods, Batch Apex, Queueable Apex, and Scheduled Apex) handles operations that are resource-intensive or need to run independently of the current transaction. They are used for tasks such as processing large datasets, making callouts to external services, and improving system performance by deferring certain operations.



6. What are Apex Job Queues?

Apex Job Queues manage asynchronous operations, allowing Salesforce to queue and execute asynchronous Apex requests like batch and scheduled jobs. They ensure that these jobs are handled systematically, avoiding conflicts and optimizing resource usage.



7. How do you schedule Apex Jobs?

Apex jobs can be scheduled using the System.schedule method, where you specify the job name, a CRON expression for timing, and an instance of the Schedulable class. Alternatively, the Setup UI provides a point-and-click interface to schedule these jobs without coding.



8. How do you set up security for Apex Class?

Security is enforced by declaring Apex classes as with sharing or without sharing to respect or bypass sharing rules. Additionally, field- and object-level security can be enforced using Schema methods or checking permissions programmatically to ensure secure data access.



9. Code - Flow / Process Builder / Trigger, what would you choose and why?

The choice depends on complexity and need:

Flows for complex, declarative automation and interactive screens.

Process Builder for simple, declarative workflows with limited branching.

Triggers for advanced, complex, and conditional automation beyond what Flow and Process Builder can handle, especially if it requires server-side logic.




10. How many flows are recommended for an object in Salesforce?

It’s recommended to have only one record-triggered flow per object per trigger context (create, update, delete) to simplify management and avoid conflicts. However, complex cases may require multiple flows if carefully orchestrated.



11. Triggers - How many triggers can be used for an object?

Only one trigger per object is recommended, though multiple can technically exist. Using one trigger simplifies maintenance and helps avoid recursive loops or logic conflicts.



12. Coding practice to have good high test coverage?

To ensure high test coverage:

Write unit tests covering all paths and edge cases.

Use System.assert statements to verify outcomes.

Avoid relying on hardcoded IDs; use dynamic test data instead.

Write tests for both positive and negative scenarios, and cover all branches.




13. How do you review your code to make it quality code?

Code quality review involves checking for:

Proper use of naming conventions.

Adherence to best practices (e.g., avoiding SOQL in loops).

Code readability, modularization, and reusability.

Performance optimization, especially for bulk processing.

Ensuring secure data access by enforcing sharing rules.




14. Did you work on any limitation errors to avoid governor limits during the experience?

Yes, common strategies include:

Bulkifying code by processing records in collections.

Using asynchronous Apex for long-running processes.

Caching data and avoiding unnecessary SOQL queries in loops.

Utilizing query limits and handling recursive triggers with static variables.




15. If we have multiple criteria in a flow, how do you do it?

Multiple criteria in a flow can be managed using decision elements to branch logic based on conditions. Nested decision elements can handle complex criteria, and formula fields within the flow can be used for advanced logic.



16. There is a code that is causing the processing limits (Governor limit problem), how would these limits be avoided?

To avoid governor limits:

Optimize SOQL queries by using LIMIT and filtering unnecessary data.

Avoid SOQL/DML in loops; batch DML operations instead.

Use collections like maps and sets to manage data in bulk.

Consider asynchronous processing (e.g., Batch Apex, Future Methods) for resource-intensive operations.




17. What are Future Methods?

Future Methods are asynchronous Apex methods marked with @future. They run in the background and are useful for callouts to external systems or offloading tasks that do not need to complete immediately. They help reduce processing time and avoid hitting limits in synchronous transactions.



18. What migration tools have been used during the experience, Any idea on ANT tool?

Salesforce offers several migration tools, including:

Change Sets for straightforward, declarative migrations between connected environments.

Salesforce CLI (sfdx) for scripted deployments.

ANT Migration Tool, which is based on Apache ANT and provides flexibility for deployments, especially in CI/CD pipelines, allowing automated pushes and pulls between orgs.



Here are comprehensive responses to the integration and Agile-related questions from your image:

Integration Related Questions

1. What kind of Integrations were performed during the experience?

I worked on multiple types of integrations, including real-time integrations using REST and SOAP APIs for data synchronization between Salesforce and external systems. I also utilized Platform Events for event-driven architectures and Outbound Messages for simpler data updates triggered by workflow rules. These integrations facilitated seamless data flow and ensured consistency across systems.



2. Where did you send the Outbound messages to? Example: Any out-of-the-box functionality used for outbound messages (Any customization done)?

Outbound Messages were configured to send data to external systems like ERP or inventory management systems. I leveraged Salesforce’s native workflow-based outbound messaging, which allowed data updates upon specified criteria. For complex use cases, I customized message formats and incorporated additional data processing in the receiving system.



3. What is Composite API?

The Composite API is a Salesforce REST API that allows multiple requests to be combined into a single call. It enables developers to execute a series of dependent operations, such as creating and updating related records, in a single transaction, which improves performance and reduces API calls. It’s particularly useful for maintaining data integrity across multiple related objects.



4. Worked on publishing the data to external systems?

Yes, I have worked on publishing data using outbound messaging and Platform Events. Outbound messaging enabled reliable delivery to external endpoints, while Platform Events allowed real-time, event-driven communication with external systems, ensuring that they received updates immediately as events were triggered in Salesforce.



5. Sales Cloud - Challenge: Sending data to an outbound messaging system using SOAP integration, which is a limitation currently in Salesforce (SOAP authentication is not accepted), how do you resolve this issue?

If SOAP authentication is not accepted, a possible solution is to use a middleware platform like MuleSoft or an API Gateway that can accept SOAP requests and handle authentication, then convert these requests to REST for Salesforce. This allows secure and authenticated data flow without modifying the SOAP-based external system.



6. Outbound messages can be dealt using REST API or no?

Outbound messages in Salesforce are typically SOAP-based and configured as part of workflow rules. However, REST API can achieve similar functionality by calling external services through HttpRequest in Apex. For greater flexibility, REST-based integration can be implemented directly in Apex to send custom payloads to external endpoints.




Agile Related Questions

1. What is Agile?

Agile is a project management and product development approach based on iterative progress, collaboration, and flexibility. It emphasizes delivering small, functional increments rather than a complete product at once, allowing for regular feedback, adaptability, and continuous improvement.



2. How Agile works and explain at high level?

Agile operates through iterative cycles, often called sprints, which last 1-4 weeks. Each sprint involves planning, development, testing, and review phases to deliver a potentially shippable increment of the product. Agile emphasizes collaboration between cross-functional teams and regular stakeholder feedback to adjust and improve the product continually.



3. Have you ever been involved in sizing of the story? How does that work?

Yes, I have been involved in story sizing using techniques like planning poker. Sizing involves estimating the effort required for each user story, usually in story points based on complexity and effort. This helps the team gauge workload, prioritize tasks, and plan sprints realistically.



Here are responses to the Velocity (Salesforce Industries) and Config-related questions to help you prepare:

Velocity Related Questions

1. Data Raptors in Sales Cloud used?

DataRaptors in Salesforce Industries (Velocity) are used to extract, transform, and load data from Salesforce objects. They can perform data operations like retrieving records, transforming data formats, and updating records within Sales Cloud, enabling efficient data processing for custom applications and integrations.



2. OMNI Studio - Salesforce to Other Systems Sync Up?

OmniStudio in Salesforce Industries offers tools like Integration Procedures and DataRaptors that facilitate syncing data between Salesforce and other systems. Integration Procedures can call external APIs to retrieve or send data, enabling real-time data exchange and maintaining data consistency across systems.



3. What Flows and Business Implemented During Velocity Experience?

In Velocity, OmniScripts are used to build guided flows that handle various business processes, such as customer onboarding, case management, and order processing. OmniScripts provide a step-by-step interface for users, while FlexCards and Integration Procedures are used to fetch, display, and manage data across steps in real-time.



4. Sales Cloud - If I have additional license, will I be able to make an outbound call using Data Raptor?

DataRaptors themselves are primarily designed for internal data operations within Salesforce. For outbound calls, you typically use Integration Procedures, which can call external APIs if the necessary Salesforce Industries (Velocity) licenses and permissions are in place.



5. Sales Cloud - If I have additional license, will I be able to make an outbound call using Data Raptor? (Repeated Question)

As above, DataRaptors handle data transformations within Salesforce. Outbound data calls should utilize Integration Procedures, which allow interaction with external systems through REST and SOAP APIs when an additional license supports these capabilities.




Config Related Questions

1. Did you use Permission Sets?

Yes, Permission Sets are essential for managing user access to specific objects, fields, and features without changing their profiles. They allow for flexible permission management, making it easy to grant additional access to individual users or groups without modifying roles or profiles.



2. Define Role Security. I have an object that had users and their manager, how do you define security to make a role hierarchy?

Role security in Salesforce is structured in a hierarchy where higher roles (like managers) inherit access to records owned by users in lower roles. For an object with users and managers, the role hierarchy allows managers to access their team members' records automatically, supporting both visibility and control based on organizational structure.



3. What is the sharing rule different from permission set?

Sharing rules extend access to records based on ownership or criteria, allowing broader access at the record level, beyond what role hierarchy permits. Permission Sets, on the other hand, control access at the object and field level and don’t automatically grant access to individual records.



4. What instances worked in Salesforce?

Salesforce instances refer to the specific servers where Salesforce orgs are hosted, such as NA, EU, or AP instances based on geographic regions. These instances ensure data localization and optimize performance for users in specific regions.



Here are responses to the final set of questions from the image:

General Salesforce and Career Questions

1. What is the mechanism behind the scenes to have the UI refresh happening seamlessly in Salesforce?

In Salesforce, seamless UI refresh is achieved through a combination of technologies like Lightning Data Service (LDS) and real-time push updates. LDS caches data on the client side, reducing the need for repeated server calls and ensuring fast data updates. Real-time updates can be achieved using Platform Events or Streaming API, which automatically push changes to users’ screens without manual refreshes, ensuring the UI stays up-to-date.



2. What are you looking for in the next few years in your career?

In the next few years, I aim to deepen my expertise in Salesforce development and architecture, focusing on advanced integrations and scalable solutions. I am particularly interested in exploring areas like AI-driven insights, enhancing customer experience, and gaining more experience in leading projects. I also plan to pursue certifications to strengthen my technical skills and contribute to high-impact projects within my organization.



3. Deployment process and tools used during the experience?

I have used various deployment tools, including Change Sets for simple deployments between sandbox and production, Salesforce CLI (sfdx) for more complex deployments, and ANT Migration Tool for automated and CI/CD deployments. Additionally, GitHub was used for version control and collaborative development, ensuring all code changes are tracked and that we can revert if needed.



4. ANT tool scripting and GitHub?

ANT tool scripting is used in Salesforce for automating deployments. It allows us to create XML-based scripts that specify components to be deployed and manage deployments efficiently. GitHub complements this by serving as a version control system, enabling collaboration among developers, tracking changes, and supporting pull requests and code reviews for a controlled and traceable development process.



5. DataLoader CLI?

DataLoader CLI is a command-line version of Salesforce Data Loader, which allows for bulk data import, update, delete, and export operations directly from the command line. It is useful for automating data operations through scripts, enabling scheduled or repetitive tasks without manual intervention.
















