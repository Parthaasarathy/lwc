Here are answers to the Lightning-related interview questions:

1. Any Lightning Upgrade? Salesforce regularly upgrades its platform with three releases per year: Spring, Summer, and Winter. These updates often include enhancements for Lightning Experience, improving UI, developer tools, and performance.


2. What is LDS and what does it do? LDS (Lightning Data Service) is a standard Salesforce library that provides access to Salesforce records and simplifies data handling in Lightning Components. It handles CRUD operations, caching, and field-level security, reducing the need for Apex controllers.


3. Having LDS benefits LWC? Yes, LDS simplifies working with records in LWC by providing reactive data bindings and built-in methods for record access and updates. It minimizes the need for manual server calls and improves component performance.


4. LMS LMS (Lightning Message Service) enables communication between Lightning Web Components (LWCs), Aura Components, and Visualforce pages. It allows message-based interactions without direct parent-child relationships.


5. What is Lightning Data Service? Lightning Data Service is a framework that allows Lightning Components to access and manipulate Salesforce records without Apex code. It ensures data consistency and respects user permissions.


6. Aura and LWC Difference?

Syntax: Aura uses XML-like markup, while LWC uses modern JavaScript standards.

Performance: LWC is faster due to its lightweight framework.

Reusability: LWC has better code modularity and reusability.

Learning Curve: LWC uses modern web standards, making it easier for web developers.



7. Performance - Who were they fixed during the experience? Performance in Salesforce is improved by using:

Caching with LDS.

Efficient data queries (SOQL optimization).

Reducing DOM operations.

Lazy loading components and data.

Minimizing server calls.



8. Any Difference between OmniScript and LWC in terms of functionality?

OmniScript: A declarative tool for creating guided workflows without coding, suitable for business users.

LWC: A developer-centric framework for creating reusable UI components with custom logic.



9. What is DOM and Shadow DOM?

DOM (Document Object Model): Represents the structure of a web page.

Shadow DOM: Encapsulates styles and markup for web components, ensuring they do not conflict with other elements.



10. LWC Lifecycle Hook? Common lifecycle hooks:

connectedCallback(): Called when the component is inserted into the DOM.

disconnectedCallback(): Called when the component is removed from the DOM.

renderedCallback(): Called after rendering.



11. How to communicate and pass information between 2 LWCs?

Use Lightning Message Service for decoupled communication.

Use parent-child relationship and pass data via attributes or events.



12. Aura and LWC Differences? Already addressed in Question 6.


13. LWC Best Practices?

Use LDS for record access.

Keep components modular and reusable.

Optimize data loading with caching.

Follow modern JavaScript practices.

Use events for communication between components.




Let me know if you'd like further explanations or assistance with additional topics!

Here are the answers to the Apex and Flows related questions:

1. Lead - What is the day in/out activities?

A lead's daily activities may include:

Handling new leads generated by campaigns.

Qualifying leads based on scoring.

Assigning leads to sales reps using automation tools like workflows or assignment rules.

Tracking progress using reports and dashboards.

Closing leads by converting them into opportunities.



2. Test Coverage Standards?

Salesforce requires a minimum of 75% code coverage for deployment to production.

Best practices include:

Writing meaningful test cases that cover positive, negative, and edge scenarios.

Mocking data using @isTest annotations.

Avoiding hardcoding IDs in test methods.



3. Any Test Case Failures During Deployments? If yes, how are they handled?

Common reasons for test failures:

Missing test data or incorrect data assumptions.

Governor limit violations.

Dependency on metadata changes.


How to handle:

Debug using logs and fix issues.

Add missing test data using Test.setup() or create mock data.

Optimize code to avoid limits.



4. Trigger Best Practices?

Avoid using logic in triggers; delegate to helper classes.

Use one trigger per object.

Use context variables (isInsert, isUpdate, isDelete) to manage execution flow.

Bulkify triggers to handle multiple records efficiently.


5. What is Apex Action and what do you do with Apex actions?

Apex actions are server-side methods exposed to Lightning components or flows.

They are used to perform server-side logic like database operations or complex calculations.


6. Asynchronous Apex and why are they used?

Asynchronous Apex includes future methods, Queueable Apex, Batch Apex, and Scheduled Apex.

Used for:

Handling long-running operations.

Avoiding governor limits by performing operations in separate transactions.



7. What are Apex Job Queues?

Apex job queues store and manage asynchronous jobs like scheduled jobs, batch jobs, and queueable jobs.


8. How do you schedule Apex jobs?

Use System.schedule() method to schedule Apex classes that implement Schedulable interface.


9. How do you set up security for Apex classes?

Use the with sharing keyword to enforce sharing rules.

Grant access to users through permission sets or profiles.


10. Code - Flow / Process Builder / Trigger, what would you choose and why?

Use Flow for simple automation tasks with no coding required.

Use Process Builder for multi-step, condition-based automation.

Use Triggers for complex logic requiring Apex.


11. How many flows are recommended for an object in Salesforce?

Limit the number of flows per object to ensure better maintainability and avoid performance issues (recommended: 2-3).


12. Triggers - How many triggers can be used for an object?

Salesforce recommends only one trigger per object, combining all logic into one for better control.


13. Coding Practice to Have Good High Test Coverage?

Use test data factories for reusability.

Write unit tests covering all branches of logic.

Test for bulk operations and governor limits.


14. Which one will be taken for implementation - Workflows/Flows/Triggers?

Use Flows for declarative solutions.

Use Triggers if coding is required for complex logic.


15. How do you review your code to make it a quality code?

Use static code analysis tools like PMD.

Follow Salesforce best practices (bulkification, reusable methods).

Peer review and testing.


16. Did you work on any limitation errors to avoid governor limits during the experience?

Use bulkified queries and DML operations.

Use caching to reduce repetitive SOQL queries.

Use asynchronous Apex to split operations.


17. If we have multiple criteria in a flow, how do you do it?

Use decision elements with multiple conditions.

Combine criteria using logical operators (AND, OR).


18. There is a code causing processing limits (Governor Limit problem). How would these limits be avoided?

Optimize SOQL queries (e.g., use LIMIT).

Reduce DML operations by grouping records.

Use asynchronous processing.


19. What are Future Methods?

Future methods are asynchronous Apex methods used for operations like callouts and heavy computations. They are annotated with @future.


20. What migration tools have been used during the experience? Any idea on ANT tool?

Common migration tools:

Salesforce DX for modern DevOps.

Change Sets for simple metadata migration.

ANT Migration Tool for automating deployments.



Let me know if you need further clarifications!

Here are the answers to the Integration-related questions:

1. What kind of Integrations were performed during the experience?

Inbound Integrations: Handling external data being sent into Salesforce using REST/SOAP APIs, Platform Events, or Change Data Capture (CDC).

Outbound Integrations: Sending data from Salesforce to external systems using outbound messages, HTTP callouts, or custom Apex integrations.

Middleware Usage: Integrating via middleware like MuleSoft or Dell Boomi for complex scenarios.

Data Sync: Real-time or batch synchronization with external systems like ERPs, CRMs, or databases.



---

2. Where did you send the Outbound Messages to?

Outbound messages can be sent to:

Webhooks or external endpoints listening for updates.

Middleware platforms for further routing.

APIs of third-party services, such as payment processors or external CRMs.


Customizations: Adding custom headers, authentication tokens, or error-handling mechanisms for secure and reliable communication.



---

3. What is Composite API?

The Composite API allows executing multiple REST API requests in a single call. It reduces round trips between the client and Salesforce and is ideal for:

Batch Operations: Performing create, update, and delete operations in a single request.

Parent-Child Relationships: Handling related records like Accounts and Contacts in one transaction.

Error Handling: Ensures all or none execution to maintain data consistency.




---

4. Worked on Publishing the Data to External Systems?

Yes, using:

Outbound Messages: Automatic SOAP-based communication triggered by workflows.

HTTP Callouts: Using Apex for REST API communication.

Platform Events: For real-time event-driven architectures.

MuleSoft Integration: For robust and scalable publishing workflows.




---

5. Sales Cloud - Challenge: Sending data to Outbound Messaging System using SOAP integration which is a limitation currently in Salesforce (SOAP Authentication is not accepted). How do you resolve this issue?

Solution:

Replace SOAP-based outbound messaging with REST API callouts using HttpRequest and HttpResponse classes in Apex.

Use Middleware like MuleSoft to transform SOAP requests into RESTful APIs.

Implement custom integration patterns using OAuth authentication for secure communication.




---

6. Outbound Messages can be dealt with REST API or not?

No, Salesforce Outbound Messages are SOAP-based by design and cannot directly use REST APIs.

However, you can simulate the behavior of outbound messages via:

Apex Callouts to REST endpoints.

Platform Events to notify external systems in real time.



Let me know if you'd like deeper explanations or examples for any of these points!

Here are the answers to the Agile and Velocity-related questions:

Agile-Related Questions

1. What is Agile?

Agile is a project management methodology that focuses on iterative development, collaboration, and continuous improvement.

It emphasizes delivering small, functional increments of a product rather than a full deliverable at once.

Agile methodologies include Scrum, Kanban, and SAFe.



2. How Agile works and explain at a high level?

Agile divides the project into smaller parts called "sprints" (2–4 weeks).

Teams prioritize tasks during planning meetings (Sprint Planning).

Daily stand-up meetings track progress and identify blockers.

After each sprint, the team demonstrates deliverables during a Sprint Review.

Feedback is incorporated into subsequent sprints for continuous improvement.



3. Have you ever been involved in sizing the story? How does that work?

Story sizing estimates the effort required to complete a user story using techniques like:

Planning Poker: Team members assign points to tasks based on complexity.

T-Shirt Sizing: Tasks are categorized as small, medium, large, or extra-large.

Fibonacci Sequence: Assigning numbers like 1, 2, 3, 5, 8 to indicate effort.


Collaboration and consensus are essential, and story points are based on complexity, risk, and effort.





---

Velocity-Related Questions

1. Data Raptors in Sales Cloud used?

Data Raptors are tools in Salesforce OmniStudio used to extract, transform, and load (ETL) data.

In Sales Cloud, they can:

Retrieve Account, Contact, or Opportunity data.

Perform data transformations to map fields between Salesforce and external systems.




2. OMNI Studio - Salesforce to Other Systems Sync Up?

OmniStudio can sync Salesforce data with other systems using:

Integration Procedures: To handle complex logic and transformations.

DataRaptors: To extract and load data efficiently.

API Callouts: To push or pull data from external systems.




3. What flows and business implemented during Velocity experience?

Business implementations using Velocity typically include:

Automating customer onboarding.

Configuring product catalogs and pricing engines.

Using pre-built templates for faster deployments.




4. Sales Cloud - If I have additional licenses, will I be able to make an outbound call using DataRaptor?

Yes, DataRaptors can make outbound calls if properly configured with API endpoints and authentication mechanisms.

Additional licenses might grant permissions for specific functionalities, such as API access or additional environments.




Let me know if you’d like further elaboration or examples for these answers!

Here are the answers to the Config-related and Other questions:

Config-Related Questions

1. Did you use Permission Sets?

Yes, Permission Sets are used to grant additional access to users without altering their profiles.

Common use cases include:

Assigning temporary access to features or records.

Providing access to specific objects, fields, or apps.






---

2. Define role security, I have an object that had users and their manager. How do you define security to make a role hierarchy?

Role Hierarchy in Salesforce allows managers to access their subordinates' records automatically.

Steps:

Create a role for each position (e.g., Manager, Team Lead, Employee).

Assign users to their respective roles.

Enable sharing settings for the object (e.g., "Grant Access Using Hierarchies").






---

3. What is the sharing rule different from a permission set?

Permission Set:

Grants additional access to users beyond their profile.

Assigned at the individual user level.

Does not depend on ownership or record hierarchy.


Sharing Rule:

Provides record-level access to groups of users.

Based on ownership or criteria (e.g., sharing all records in a region).

Assigned to roles, roles & subordinates, or public groups.






---

4. What instances worked in Salesforce?

Instances refer to Salesforce environments like:

Production: The live environment.

Sandbox: For development, testing, or training (Developer, Partial Copy, Full Copy).

Developer Org: For building and testing customizations.






---

Other Questions

1. What is the mechanism behind the scenes to have the UI refresh happening seamlessly in Salesforce?

Salesforce uses Lightning Data Service (LDS) and the Pub-Sub model for seamless UI refresh.

Key mechanisms:

Event-driven architecture: Automatically updates components when data changes.

Reactivity: LDS caches data and ensures all dependent components refresh when a record is updated.






---

2. What are you looking for in the next few years in your career?

Focus areas:

Developing expertise in Salesforce's advanced features like OmniStudio, Einstein AI, and Marketing Cloud.

Transitioning to roles involving architectural design or technical leadership.

Contributing to end-to-end digital transformation projects.






---

3. Deployment process and tools used during the experience.

Deployment tools:

Change Sets: For simple metadata migrations.

Salesforce DX: For modern CI/CD pipelines.

ANT Migration Tool: For script-based deployments.


Steps:

1. Validate metadata in a Sandbox.


2. Deploy changes to UAT (User Acceptance Testing).


3. Deploy to Production after successful testing.







---

4. ANT Tool Scripting and GitHub?

ANT Tool: Used for automating metadata deployment and retrieval.

Scripts include retrieving metadata (retrieve.xml) and deploying changes (deploy.xml).


GitHub:

Version control for tracking changes in metadata.

Collaborate with teams using pull requests and branching strategies.






---

5. DataLoader CLI?

DataLoader CLI is a command-line tool for importing, exporting, and deleting data in Salesforce.

Features:

Automates repetitive tasks like bulk data updates.

Uses configuration files (.sdl files) for operations.

Can be scheduled using scripts for recurring tasks.





Let me know if you need further assistance or detailed explanations!

