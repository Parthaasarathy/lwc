<template>
    <lightning-card title="Account Data Table" icon-name="standard:account">
        <div class="slds-m-around_medium">
            <lightning-input 
                type="search" 
                placeholder="Search by Name, Type, or Phone" 
                label="Search" 
                onchange={handleSearch}>
            </lightning-input>
        </div>
        
        <lightning-datatable
            key-field="Id"
            data={displayedAccounts}
            columns={columns}
            onsort={handleSort}
            sorted-by={sortedBy}
            sorted-direction={sortedDirection}>
        </lightning-datatable>
        
        <div class="slds-m-around_medium">
            <lightning-button label="Previous" onclick={handlePrevious} disabled={disablePrevious}></lightning-button>
            <lightning-button label="Next" onclick={handleNext} disabled={disableNext}></lightning-button>
        </div>
    </lightning-card>
</template>


import { LightningElement, track } from 'lwc';
import getAccounts from '@salesforce/apex/AccountController.getAccounts';

export default class AccountTable extends LightningElement {
    @track accounts = []; // Holds all accounts retrieved from the server
    @track displayedAccounts = []; // Holds accounts for the current page
    @track columns = [
        { label: 'Account Name', fieldName: 'Name', sortable: true },
        { label: 'Type', fieldName: 'Type', sortable: true },
        { label: 'Phone', fieldName: 'Phone', sortable: true }
    ];
    @track sortedBy;
    @track sortedDirection = 'asc';
    @track pageSize = 10;
    @track pageNumber = 1;
    @track disablePrevious = true;
    @track disableNext = false;
    @track searchKey = '';

    connectedCallback() {
        this.loadAccounts();
    }

    loadAccounts() {
        getAccounts({ searchKey: this.searchKey })
            .then(result => {
                this.accounts = result;
                this.updateDisplayedAccounts();
                this.updatePaginationButtons();
            })
            .catch(error => {
                console.error('Error fetching accounts:', error);
            });
    }

    updateDisplayedAccounts() {
        const start = (this.pageNumber - 1) * this.pageSize;
        const end = start + this.pageSize;
        this.displayedAccounts = this.accounts.slice(start, end);
    }

    updatePaginationButtons() {
        this.disablePrevious = this.pageNumber === 1;
        this.disableNext = (this.pageNumber * this.pageSize) >= this.accounts.length;
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.pageNumber = 1; // Reset to the first page when a new search is performed
        this.loadAccounts();
    }

    handleSort(event) {
        const { fieldName: sortedBy, sortDirection } = event.detail;
        this.sortedBy = sortedBy;
        this.sortedDirection = sortDirection;
        this.accounts = [...this.accounts].sort((a, b) => {
            let fieldA = a[sortedBy] ? a[sortedBy].toLowerCase() : '';
            let fieldB = b[sortedBy] ? b[sortedBy].toLowerCase() : '';
            return sortDirection === 'asc' ? fieldA.localeCompare(fieldB) : fieldB.localeCompare(fieldA);
        });
        this.pageNumber = 1; // Reset to first page after sorting
        this.updateDisplayedAccounts();
        this.updatePaginationButtons();
    }

    handlePrevious() {
        if (this.pageNumber > 1) {
            this.pageNumber -= 1;
            this.updateDisplayedAccounts();
            this.updatePaginationButtons();
        }
    }

    handleNext() {
        if ((this.pageNumber * this.pageSize) < this.accounts.length) {
            this.pageNumber += 1;
            this.updateDisplayedAccounts();
            this.updatePaginationButtons();
        }
    }
}



public with sharing class AccountController {
    @AuraEnabled(cacheable=true)
    public static List<Account> getAccounts(String searchKey) {
        String searchPattern = '%' + searchKey + '%';

        // Fetch all matching accounts based on the search key
        return [SELECT Id, Name, Type, Phone 
                FROM Account
                WHERE (Name LIKE :searchPattern OR Type LIKE :searchPattern OR Phone LIKE :searchPattern)
                ORDER BY Name];
    }
}