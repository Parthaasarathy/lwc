import { LightningElement, track, wire } from 'lwc';
import getAccounts from '@salesforce/apex/AccountController.getAccounts';

export default class AccountTable extends LightningElement {
    @track accounts = [];
    @track columns = [
        { label: 'Account Name', fieldName: 'Name', sortable: true },
        { label: 'Type', fieldName: 'Type', sortable: true },
        { label: 'Phone', fieldName: 'Phone', sortable: true }
    ];
    @track sortedBy;
    @track sortedDirection = 'asc';
    @track pageSize = 10;
    @track pageNumber = 1;
    @track disablePrevious = true;
    @track disableNext = false;
    @track searchKey = '';

    connectedCallback() {
        this.loadAccounts();
    }

    loadAccounts() {
        getAccounts({ searchKey: this.searchKey, pageSize: this.pageSize, pageNumber: this.pageNumber })
            .then(result => {
                this.accounts = result.records;
                this.disablePrevious = this.pageNumber === 1;
                this.disableNext = !result.hasMore;
            })
            .catch(error => {
                console.error('Error fetching accounts:', error);
            });
    }

    handleSearch(event) {
        this.searchKey = event.target.value;
        this.pageNumber = 1; // Reset to the first page when a new search is performed
        this.loadAccounts();
    }

    handleSort(event) {
        const { fieldName: sortedBy, sortDirection } = event.detail;
        this.sortedBy = sortedBy;
        this.sortedDirection = sortDirection;
        this.accounts = [...this.accounts].sort((a, b) => {
            let fieldA = a[sortedBy] ? a[sortedBy].toLowerCase() : '';
            let fieldB = b[sortedBy] ? b[sortedBy].toLowerCase() : '';
            return sortDirection === 'asc' ? fieldA.localeCompare(fieldB) : fieldB.localeCompare(fieldA);
        });
    }

    handlePrevious() {
        if (this.pageNumber > 1) {
            this.pageNumber -= 1;
            this.loadAccounts();
        }
    }

    handleNext() {
        this.pageNumber += 1;
        this.loadAccounts();
    }
}



public with sharing class AccountController {
    @AuraEnabled(cacheable=true)
    public static AccountWrapper getAccounts(String searchKey, Integer pageSize, Integer pageNumber) {
        String searchPattern = '%' + searchKey + '%';
        
        // Querying accounts with search criteria and pagination
        List<Account> accountList = [SELECT Id, Name, Type, Phone 
                                     FROM Account
                                     WHERE (Name LIKE :searchPattern OR Type LIKE :searchPattern OR Phone LIKE :searchPattern)
                                     ORDER BY Name
                                     LIMIT :pageSize OFFSET :((pageNumber - 1) * pageSize)];
        
        // Determine if there are more records to paginate
        Boolean hasMore = accountList.size() == pageSize;
        
        return new AccountWrapper(accountList, hasMore);
    }

    public class AccountWrapper {
        @AuraEnabled public List<Account> records;
        @AuraEnabled public Boolean hasMore;
        
        public AccountWrapper(List<Account> records, Boolean hasMore) {
            this.records = records;
            this.hasMore = hasMore;
        }
    }
}