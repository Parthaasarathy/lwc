import { LightningElement, track, wire } from 'lwc';
import getAccounts from '@salesforce/apex/AccountManagerController.getAccounts';
import updateAccount from '@salesforce/apex/AccountManagerController.updateAccount';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class AccountManager extends LightningElement {
    @track accounts = [];
    @track searchKey = '';
    @track selectedIndustry = 'All';
    @track notificationMessage = '';

    industryOptions = [
        { label: 'All', value: 'All' },
        { label: 'Agriculture', value: 'Agriculture' },
        { label: 'Banking', value: 'Banking' },
        { label: 'Consulting', value: 'Consulting' },
        { label: 'Technology', value: 'Technology' },
    ];

    columns = [
        { label: 'Name', fieldName: 'Name' },
        { label: 'Phone', fieldName: 'Phone' },
        { label: 'Industry', fieldName: 'Industry', editable: true },
        { label: 'Annual Revenue', fieldName: 'AnnualRevenue', type: 'currency', editable: true },
    ];

    @wire(getAccounts, { searchKey: '$searchKey', industryFilter: '$selectedIndustry' })
    wiredAccounts({ error, data }) {
        if (data) {
            this.accounts = data;
        } else if (error) {
            this.notificationMessage = 'Error fetching account records.';
        }
    }

    handleSearchChange(event) {
        this.searchKey = event.target.value;
    }

    handleIndustryChange(event) {
        this.selectedIndustry = event.target.value;
    }

    async handleSave(event) {
        const updatedFields = event.detail.draftValues;

        try {
            // Call Apex method to update the account
            await updateAccount({ accountsToUpdate: updatedFields });

            // Show success notification
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Account(s) updated successfully!',
                    variant: 'success'
                })
            );

            // Clear the draft values and refresh data
            this.template.querySelector('lightning-datatable').draftValues = [];
            return refreshApex(this.wiredAccounts);
        } catch (error) {
            // Show error notification
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'Error updating account(s): ' + error.body.message,
                    variant: 'error'
                })
            );
        }
    }
}

public with sharing class AccountManagerController {
    @AuraEnabled(cacheable=true)
    public static List<Account> getAccounts(String searchKey, String industryFilter) {
        String searchKeyLike = '%' + searchKey + '%';
        String query = 'SELECT Id, Name, Industry, AnnualRevenue, Phone FROM Account WHERE (Name LIKE :searchKeyLike OR Phone LIKE :searchKeyLike) AND IsDeleted = false';

        if (industryFilter != 'All' && industryFilter != null) {
            query += ' AND Industry = :industryFilter';
        }

        return Database.query(query);
    }

    @AuraEnabled
    public static void updateAccount(List<Account> accountsToUpdate) {
        if (accountsToUpdate == null || accountsToUpdate.isEmpty()) {
            throw new AuraHandledException('No accounts provided for update.');
        }

        try {
            update accountsToUpdate;
        } catch (Exception e) {
            throw new AuraHandledException('Failed to update accounts: ' + e.getMessage());
        }
    }
}

