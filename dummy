import { LightningElement, track, wire } from 'lwc';
import getAccounts from '@salesforce/apex/AccountManagerController.getAccounts';
import updateAccount from '@salesforce/apex/AccountManagerController.updateAccount';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

export default class AccountManager extends LightningElement {
    @track accounts = [];
    @track searchKey = '';
    @track selectedIndustry = 'All';
    @track notificationMessage = '';

    industryOptions = [
        { label: 'All', value: 'All' },
        { label: 'Agriculture', value: 'Agriculture' },
        { label: 'Banking', value: 'Banking' },
        { label: 'Consulting', value: 'Consulting' },
        { label: 'Technology', value: 'Technology' },
    ];

    columns = [
        { label: 'Name', fieldName: 'Name' },
        { label: 'Phone', fieldName: 'Phone' },
        { label: 'Industry', fieldName: 'Industry', editable: true },
        { label: 'Annual Revenue', fieldName: 'AnnualRevenue', type: 'currency', editable: true },
    ];

    @wire(getAccounts, { searchKey: '$searchKey', industryFilter: '$selectedIndustry' })
    wiredAccounts({ error, data }) {
        if (data) {
            this.accounts = data;
        } else if (error) {
            this.notificationMessage = 'Error fetching account records.';
        }
    }

    handleSearchChange(event) {
        this.searchKey = event.target.value;
    }

    handleIndustryChange(event) {
        this.selectedIndustry = event.target.value;
    }

    async handleSave(event) {
        const updatedFields = event.detail.draftValues;

        try {
            // Call Apex method to update the accounts
            await updateAccount({ accountsToUpdate: updatedFields });

            // Update the local data to reflect the changes immediately
            updatedFields.forEach((updatedRecord) => {
                const index = this.accounts.findIndex((account) => account.Id === updatedRecord.Id);
                if (index !== -1) {
                    // Merge the updated fields into the original account record
                    this.accounts[index] = { ...this.accounts[index], ...updatedRecord };
                }
            });

            // Clear the draft values in the datatable
            this.template.querySelector('lightning-datatable').draftValues = [];

            // Show success notification
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Account(s) updated successfully!',
                    variant: 'success'
                })
            );
        } catch (error) {
            // Show error notification
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'Error updating account(s): ' + error.body.message,
                    variant: 'error'
                })
            );
        }
    }
}